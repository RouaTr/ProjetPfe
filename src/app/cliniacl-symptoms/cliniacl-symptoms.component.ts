import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormArray, FormGroup, Validators, FormControl, AbstractControl } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { CrudService } from '../service/crud.service';

@Component({
  selector: 'app-cliniacl-symptoms',
  templateUrl: './cliniacl-symptoms.component.html',
  styleUrls: ['./cliniacl-symptoms.component.css']
})
export class CliniaclSymptomsComponent implements OnInit {
  ClinicalSymptomsForm: FormGroup;
  patientId: number | null = null;
  messageCommande = "";
  patientName: string = '';  // D√©finition de la propri√©t√© patientName
  patientLastName: string = '';
  // Liste des options par cat√©gorie
  options: { [key: string]: string[] } = {
    generalSigns: [
      'Ad√©nopathie isol√©e', 'Ad√©nopathies g√©n√©ralis√©es', 'Amaigrissement', 'Cachexie',
      'Fi√®vre aig√ºe', 'Fi√®vre persistante', 'Prise de poids', 'Syndrome dysthyro√Ødien',
      'Syndrome pseudogrippal', 'Syndrome sec', 'Alt√©ration de l\'√©tat g√©n√©ral', 'Autres signes g√©n√©raux'
  ],
  dermatological: [
      'Abc√®s', 'Acn√©', 'Allergie m√©dicamenteuse (Dermite)', 'Angiome stellaire', 'Aphtes', 'Condylomes',
      'Dermatose bulleuse', 'Dermite s√©borrh√©ique', 'Ecz√©ma', '√âruption cutan√©e ',
      '√âryth√®me', '√ârythrose palmaire', 'Folliculite', 'Gale', 'Herp√®s', 'Kaposi cutan√©',
      'Leucoplasie chevelue', 'Lichen plan', 'M√©lanodermie', 'Muguet buccal', 'Ongles: anomalies √† pr√©ciser',
      'Onychomycose'
  ],
  neuroMuscular: [
      'Ataxie', 'Atteinte des fonctions sup√©rieures', 'D√©ficit moteur', 'D√©ficit sensitif', 'Lumbago', 'Myalgie',
      'Paralysie faciale', 'Polyn√©vrite', 'Syndrome m√©ning√©', 'Tremblement', 'Vertiges', 'Autres signes neuro'
  ],
  ent: [
      'Aphtes', 'Aphtose', 'Leucoplasie chevelue', 'Muguet buccal', 'Otorrh√©e', 'Parotide hypertrophi√©e',
      'Pharyngite', 'Sinusite', 'Autres signes ORL'
  ],
  psychiatric: [
      'D√©mence li√©e au VIH', 'D√©pression majeure', 'D√©sorientation', 'Irritabilit√©', 'Syndrome d√©pressif',
      'Trouble de l\'humeur', 'Trouble de la m√©moire', 'Trouble du comportement', 'Autres signes neuro-psychiatriques'
  ],
  cardiovascular: [
      'Claudication intermittente', 'Hypertension art√©rielle', 'Hypotension art√©rielle', 'Oed√®me', 'Souffle art√©riel',
      'Souffle cardiaque', 'Trouble du rythme', 'Autres signes cardiovasculaires'
  ],
  digestive: [
      'Angiome stellaire', 'Ascite', 'Circulation veineuse collat√©rale', 'Diarrh√©e', 'Douleurs abdominales',
      'Dysphagie', 'Enc√©phalopathie h√©patique', 'Erythrose palmaire', 'Gastroent√©rite', 'H√©morragie digestive',
      'H√©patom√©galie', 'Ict√®re', 'Masse abdominale', 'Naus√©es et vomissements', 'Spl√©nom√©galie', 'Varices oesophagiennes',
      'Autres signes digestifs'
  ],
  lipodystrophy: [
      'Accumulation de graisse', 'Ballonnement abdominal', 'Bosse de bison', 'Gyn√©comastie', 'Perte de graisse'
  ],
  genitourinary: [
      'Coliques n√©phr√©tiques', 'Condylomes', 'Dysplasie l√©g√®re du col', 'Dysplasie moyenne du col', 'Dysplasie s√©v√®re du col',
      'Ecoulement ur√©tral', 'Fissure anale', 'Fistule anale', 'Grossesse', 'Hypertrophie mammaire', 'Leucorrh√©e',
      'Toucher vaginal', 'Ulc√©rations g√©nitales', 'Autres signes uro-g√©nitaux'
  ],
  ophthalmological: [
      'Amputation champ visuel', 'Baisse acuit√© visuelle', 'C√©cit√©', 'Conjonctivite', 'K√©ratite', 'Trouble visuel (SAI)',
      'Autres signes ophtalmologiques'
  ],
  pulmonary: [
      'Bronchite aigu√´ (SAI)', 'Bronchite chronique (SAI)', 'Cyanose', 'Dyspn√©e', 'R√¢les', 'Sifflements', 'Toux',
      'Autres signes pleuro-pulmonaires'
  ],
  puberty: [
      'Classif. Tanner - Filles - S1', 'Classif. Tanner - Filles - S2', 'Classif. Tanner - Filles - S3',
      'Classif. Tanner - Filles - S4', 'Classif. Tanner - Filles - S5', 'Classif. Tanner - Filles - P1',
      'Classif. Tanner - Filles - P2', 'Classif. Tanner - Filles - P3', 'Classif. Tanner - Filles - P4',
      'Classif. Tanner - Filles - P5', 'Classif. Tanner - Gar√ßons - T1', 'Classif. Tanner - Gar√ßons - T2',
      'Classif. Tanner - Gar√ßons - T3', 'Classif. Tanner - Gar√ßons - T4', 'Classif. Tanner - Gar√ßons - T5',
      'Classif. Tanner - Gar√ßons - P1', 'Classif. Tanner - Gar√ßons - P2', 'Classif. Tanner - Gar√ßons - P3',
      'Classif. Tanner - Gar√ßons - P4', 'Classif. Tanner - Gar√ßons - P5'
  ]

  };
  optionsKeys: string[] = [];

  constructor(private service: CrudService, private router: Router, private fb: FormBuilder,  private route: ActivatedRoute) {
    let formControls = {
      generalSigns: new FormArray(this.options['generalSigns'].map(() => new FormControl(false))),
      dermatological: new FormArray(this.options['dermatological'].map(() => new FormControl(false))),
      neuroMuscular: new FormArray(this.options['neuroMuscular'].map(() => new FormControl(false))),
      ent: new FormArray(this.options['ent'].map(() => new FormControl(false))),
      psychiatric: new FormArray(this.options['psychiatric'].map(() => new FormControl(false))),
      cardiovascular: new FormArray(this.options['cardiovascular'].map(() => new FormControl(false))),
      digestive: new FormArray(this.options['digestive'].map(() => new FormControl(false))),
      lipodystrophy: new FormArray(this.options['lipodystrophy'].map(() => new FormControl(false))),
      genitourinary: new FormArray(this.options['genitourinary'].map(() => new FormControl(false))),
      ophthalmological: new FormArray(this.options['ophthalmological'].map(() => new FormControl(false))),
      pulmonary: new FormArray(this.options['pulmonary'].map(() => new FormControl(false))),
      puberty: new FormArray(this.options['puberty'].map(() => new FormControl(false))),

      clinicalSymptomsDate: ['', Validators.required]
    };

    this.ClinicalSymptomsForm = fb.group(formControls);
  }


  ngOnInit(): void {
    this.optionsKeys = Object.keys(this.options);
    this.route.paramMap.subscribe(params => {
      const id = params.get('patientId');
      if (id) {
        this.patientId = +id;
        console.log("üîπ ID du patient r√©cup√©r√© depuis l'URL :", this.patientId);

        // Charger le patient
        this.service.findPatientById(this.patientId).subscribe(
          (patient) => {
            this.patientName = patient.firstName;
            this.patientLastName = patient.lastName;
          },
          (error) => {
            console.error("Erreur lors de la r√©cup√©ration du patient :", error);
          }
        );
      } else {
        console.error("‚ö†Ô∏è Aucun ID patient dans l'URL !");
      }
    });

  }


  onCheckboxChange(event: any, group: string, option: any) {
    const control = this.ClinicalSymptomsForm.get(group) as FormArray;
    if (event.target.checked) {
      if (!control.value.includes(option)) {
        control.push(new FormControl(option));
      }
    } else {
      const index = control.controls.findIndex((ctrl) => ctrl.value === option);
      if (index !== -1) {
        control.removeAt(index);
      }
    }

  }

  convertArrayToString(arr: any[], options: string[]): string {
    // Filtrer les sympt√¥mes s√©lectionn√©s
    return arr
      .map((selected, index) => selected ? options[index] : null)
      .filter(symptom => symptom !== null)
      .join(', ');
  }


    isInvalidAndTouchedOrDirty(control: AbstractControl | null): boolean {
        return (control as FormControl).invalid && ((control as FormControl).touched || (control as FormControl).dirty);

      }
      logInvalidFields() {
        console.log("üî¥ Champs invalides dans le formulaire :");
        Object.keys(this.ClinicalSymptomsForm.controls).forEach(key => {
          const control = this.ClinicalSymptomsForm.get(key);
          if (control?.invalid) {
            console.log(`‚ùå Champ : ${key}`);
            console.log("   ‚Ü≥ Erreurs :", control.errors);
            // Ajoutez un contr√¥le sp√©cifique pour les FormArrays
            if (control instanceof FormArray) {
              control.controls.forEach((ctrl, index) => {
                if (ctrl.invalid) {
                  console.log(`   ‚Ü≥ Erreur dans FormArray ${key} √† l'index ${index}`);
                }
              });
            }
          }
        });
      }

    get clinicalSymptomsDate() { return this.ClinicalSymptomsForm.get('clinicalSymptomsDate'); }

  addNewClinicalSymptoms() {
    this.ClinicalSymptomsForm.markAllAsTouched();
    if (this.ClinicalSymptomsForm.invalid) {
      console.log("üö® Formulaire invalide !");
      this.logInvalidFields(); // üîç Afficher les erreurs des champs invalides
      return;
    }
    if (!this.patientId) {
      console.error("Erreur : Aucun ID patient r√©cup√©r√© !");
      this.messageCommande = `<div class="alert alert-danger" role="alert">
        Impossible d'ajouter les signes fonctionnels : aucun patient enregistr√©.
      </div>`;
      return;
    }
      if (this.ClinicalSymptomsForm.get('clinicalSymptomsDate')?.invalid) {
    console.log("üö® La date est obligatoire !");
    this.messageCommande = `<div class="alert alert-danger" role="alert">
      Veuillez renseigner la date avant de soumettre le formulaire.
    </div>`;
    return;
  }
    console.log("üìÖ Date enregistr√©e :", this.ClinicalSymptomsForm.value.clinicalSymptomsDate);

    let data = this.ClinicalSymptomsForm.value;

    // Convertir les tableaux en cha√Ænes de caract√®res
    data = {
      ...data,
      generalSigns: this.convertArrayToString(data.generalSigns, this.options['generalSigns']),
      dermatological: this.convertArrayToString(data.dermatological, this.options['dermatological']),
      neuroMuscular: this.convertArrayToString(data.neuroMuscular, this.options['neuroMuscular']),
      ent: this.convertArrayToString(data.ent, this.options['ent']),
      psychiatric: this.convertArrayToString(data.psychiatric, this.options['psychiatric']),
      cardiovascular: this.convertArrayToString(data.cardiovascular, this.options['cardiovascular']),
      digestive: this.convertArrayToString(data.digestive, this.options['digestive']),
      lipodystrophy: this.convertArrayToString(data.lipodystrophy, this.options['lipodystrophy']),
      genitourinary: this.convertArrayToString(data.genitourinary, this.options['genitourinary']),
      ophthalmological: this.convertArrayToString(data.ophthalmological, this.options['ophthalmological']),
      pulmonary: this.convertArrayToString(data.pulmonary, this.options['pulmonary']),
      puberty: this.convertArrayToString(data.puberty, this.options['puberty']),
      clinicalSymptomsDate: this.ClinicalSymptomsForm.value.clinicalSymptomsDate,
      patientId: this.patientId
    };

    console.log("üì§ Donn√©es envoy√©es :", JSON.stringify(data, null, 2));



    this.service.addClinicalSymptoms(this.patientId, data).subscribe(
      res => {
        console.log("‚úÖ R√©ponse du serveur :", res);
        this.router.navigate([`/medicalfolder/listclinicalsymptoms/${this.patientId}`]);
      },
      err => {
        console.error("‚ùå Erreur lors de l'envoi :", err);
      }
    );
  }
}
